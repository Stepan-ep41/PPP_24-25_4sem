from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import uvicorn

import asyncio
import redis.asyncio as redis
from contextlib import asynccontextmanager

import json

import random
import string

import sqlite3

from app.api.endpoints import FastApiConfig
from app.schemas.schemas import *
from app.celery.celery_app import REDIS_BROKER
from app.celery.status import Status
from app.websocket.endpoints import WebsocketConfig

from app.celery.tasks import sleep10, tsp_bruteforce, tsp_greedy



#####################################################################################################################################################################

DB_PATH = 'app/db/3lab_database.db'


class gen_token:
    def __init__(self):
        self.all_gen = []
        # –í—Å–µ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω–∏—Ü—ã (–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ, –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ) + –≤—Å–µ —Ü–∏—Ñ—Ä—ã
        self.symbols = string.ascii_letters + string.digits
        
    
    def gen_token(self):
        token = self.gen_token_()
        while token in self.all_gen:
            token = self.gen_token_()
        self.all_gen.append(token)
        return token
            
            
    def gen_token_(self):
        return''.join(random.sample(self.symbols, 12))
    

token_generator = gen_token()
        

#################################################### –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô #########################################################################################

# –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class ConnectionManager:
    def __init__(self):
        self.connections = {}
        self.tasks = {}


    async def connect(self, ws: WebSocket, email: str, token: str):
        await ws.accept()
        print(f'NEW USER: {email} <---> {token}')
        await ws.send_text(token)
        
        self.connections[token] = ws


    def disconnect(self, ws: WebSocket, email: str, token: str):
        try:
            self.connections.pop(token)
            print(f'DISCNNCT: {email} <---> {token}')
        except Exception:
            pass


    async def broadcast(self, msg: dict):
        text = json.dumps(msg)
        task_id, status = msg['task_id'], msg['status']
        
        ################################### –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ—ã id –∑–∞–¥–∞—á–∏ -> —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #################################
        # connection = sqlite3.connect(DB_PATH)
        # cursor = connection.cursor()
        # cursor.execute('SELECT * FROM Tasks WHERE task_id = ?', (task_id, ))
        # row = cursor.fetchone()
        # if row:
        #     task_id, token = row
        
        token = self.tasks[task_id]
        
        ###########################################################################################################################################
        
        print(f'RUNNING:  task({task_id}): == {status:^{14}} ==')
        
        try:
            ws = self.connections[token]
            await ws.send_text(text)
        except Exception:
            pass
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ —Ç–∞—Å–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if status==Status.STOP:
            try:
                self.tasks.pop(task_id)
            except Exception:
                pass
        #     cursor.execute('SELECT * FROM Tasks WHERE task_id = ?', (task_id, ))
        #     rows = cursor.fetchall()
        #     if rows:
        #         cursor.execute('DELETE FROM Tasks WHERE task_id = ?', (task_id, ))
        #     connection.commit()
        # connection.close()


manager = ConnectionManager()



############################################### –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï FASTAPI - REDIS+CELERY ##############################################################################################

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π lifespan manager
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ app.state!!!
    app.state.redis = redis.from_url(REDIS_BROKER, decode_responses=True)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    asyncio.create_task(main_loop())
    yield  # –ó–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç FastAPI
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    await app.state.redis.close()
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∑–∞–∫—Ä—ã—Ç–æ")



############################################### –°–û–ó–î–ê–ù–ò–ï, –ó–ê–ü–£–°–ö FASTAPI –ò –û–°–ù–û–í–ù–û–ì–û –¶–ò–ö–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–û–ë–´–¢–ò–ô ##############################################################################################

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å
app = FastAPI(lifespan=lifespan)


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
async def main_loop():
    sub = app.state.redis.pubsub()
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await sub.subscribe(WebsocketConfig.NOTIFICATIONS)
    while True:
        msg = await sub.get_message(ignore_subscribe_messages=True, timeout=None)
        if msg and msg["data"]:
            data = json.loads(msg["data"])
            await manager.broadcast(data)
        await asyncio.sleep(0.01)  # –õ–∞–π—Ñ—Ö–∞–∫, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä



################################################ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï CLIENT - FASTAPI #############################################################################################

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ WebSocket
# –î–ª—è —ç—Ç–æ–≥–æ —Å–∏–¥–∏–º –Ω–∞ –∫–∞–Ω–∞–ª–µ 'notifications' –∏ –∫–∞–∂–¥–æ–≥–æ '–ø–æ—Å—Ç—É—á–∞–≤—à–µ–≥–æ—Å—è' –æ—Ç–≤–æ–¥–∏–º –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
@app.websocket(f'/ws/{WebsocketConfig.NOTIFICATIONS}')
async def ws_client(ws: WebSocket, email: str):
    # –ñ–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    token = token_generator.gen_token()
    await manager.connect(ws, email, token)
    # –ü–æ–∫–∞ –Ω–µ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    try:
        while True:
            # pass
            await ws.receive_text()
    except WebSocketDisconnect:
        manager.disconnect(ws, email, token)



################################################################### –ó–ê–ü–†–û–°–´, –†–ê–ë–û–¢–ê–Æ–©–ò–ï –° CELERY+REDIS ################################################################################

# –¢–ï–°–¢ —Ä–∞–±–æ—Ç—ã FastApi –≤ —Å–≤—è–∑–∫–µ —Å Redis+Celery
@app.post("/tasks/sleep10")
async def run_parse(user_task: UserTask):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–º–µ—Å—Ç–µ —Å –∑–∞–¥–∞—á–µ–π
    token = user_task.token
    task = sleep10.delay()
    task_id = task.id
    
    ######### –ó–∞–Ω–æ—Å–∏–º –≤ –ë–î –∏–Ω—Ñ—É, —á—Ç–æ —Ç–∞–∫–∞—è-—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–∞–∫–æ–º—É-—Ç–æ —Ç–æ–∫–µ–Ω—É ########
    # connection = sqlite3.connect(DB_PATH)
    # cursor = connection.cursor()
    # cursor.execute('INSERT INTO Tasks (task_id, token) VALUES (?, ?)', (task_id, token))
    # connection.commit()
    # row = cursor.fetchone()
    # print(row)
    # connection.close()
    
    manager.tasks[task_id] = token
    
    #######################################################################################
    
    return {"task_id": task_id}


@app.post(FastApiConfig.SHORTEST_PATH_ENDPOINT+'bruteforce/')
async def run_tsp_slow(graph_task: GraphTask):
    token = graph_task.token
    graph = graph_task.graph
    
    task = tsp_bruteforce.delay(graph.nodes, graph.edges)
    task_id = task.id
    
    manager.tasks[task_id] = token
    
    rez = task.get()
    await asyncio.sleep(0.1)

    return rez


@app.post(FastApiConfig.SHORTEST_PATH_ENDPOINT+'greedy/')
async def run_tsp_fast(graph_task: GraphTask):
    token = graph_task.token
    graph = graph_task.graph
    
    task = tsp_greedy.delay(graph.nodes, graph.edges)
    task_id = task.id
    
    manager.tasks[task_id] = token
    
    rez = task.get()
    await asyncio.sleep(0.1)

    return rez


############################################################## –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–í–ê–¢–ï–õ–ï–ú - FASTAPI #########################################################

@app.get('/')
async def root():
    return {'message': 'This is my 3rd lab!!! I can\'t believe!'}


@app.post(FastApiConfig.SIGN_UP_ENDPOINT)
async def sing_up(user: User):
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ id
    id = None
    logged_user = {}
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
    connection = sqlite3.connect(DB_PATH)
    cursor = connection.cursor()
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ—á—Ç–µ
    cursor.execute('SELECT * FROM Users WHERE email = ?', (user.email,))
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    rows = cursor.fetchall()
    if not rows:
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É 
        cursor.execute('INSERT INTO Users (email, password) VALUES (?, ?)', (user.email, user.password))
        # –î–æ–±–∞–≤–ª—è—é –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è return
        connection.commit()
        #–ü–æ–ª—É—á–∞—é id
        cursor.execute('SELECT id FROM Users WHERE email = ? AND password = ?', (user.email, user.password))
        id = cursor.fetchall()[0][0]
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ return
        logged_user['id'] = id
        logged_user['email'] = user.email
    
    else:
        logged_user['id'] = ''
        logged_user['email'] = ''
        return {}
        
    connection.close()
    
    return {'id': logged_user['id'], 'email': logged_user['email']}


@app.post(FastApiConfig.LOGIN_ENDPOINT)
async def login(user: User):
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ id
    id = None
    logged_user = {}
    
    # –ü–æ–¥–∫—é—á–∞–µ–º—Å—è –∫ –±–¥
    connection = sqlite3.connect(DB_PATH)
    cursor = connection.cursor()
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–∞—Ä–æ–ª—é –∏ –ø–æ—á—Ç–µ
    cursor.execute('SELECT * FROM Users WHERE email = ? AND password = ?', (user.email,user.password))
    # –ü–æ–ª—É—á–µ–º –¥–∞–Ω–Ω—ã–µ –æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    rows = cursor.fetchone()
    
    connection.close()
    
    if rows:
        id, email, password = rows
        # –î–æ–±–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç
        logged_user['id'] = id
        logged_user['email'] = user.email
        
    else:
        logged_user['id'] = ''
        logged_user['email'] = ''
        return {}
        
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    return {'id': logged_user['id'], 'email': logged_user['email']}



################################################################### –ó–ê–ü–£–°–ö ############################################################################

if __name__ == '__main__':
    uvicorn.run(app, host=FastApiConfig.IP, port=FastApiConfig.PORT)
